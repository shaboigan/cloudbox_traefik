#########################################################################
# Title:         Cloudbox: Deluge Role                                  #
# Author(s):     desimaniac                                             #
# URL:           https://github.com/cloudbox/cloudbox                   #
# Docker Image:  binhex/arch-delugevpn:1.3.15                           #
# --                                                                    #
#         Part of the Cloudbox project: https://cloudbox.works          #
#########################################################################
#                   GNU General Public License v3.0                     #
#########################################################################
---
- name: "Set DNS Record on CloudFlare"
  include_role:
    name: cloudflare-dns
  vars:
    subdomain: deluge
  when: cloudflare_enabled

- name: Stop and remove any existing container
  docker_container:
    name: deluge
    state: absent

- name: Create deluge directories
  file: "path={{ item }} state=directory mode=0775 owner={{ user.name }} group={{ user.name }} recurse=yes"
  with_items:
    - /opt/deluge
    - /opt/deluge/openvpn
    - /opt/scripts/deluge

- name: Create new downloads directories
  file: "path={{ item }} state=directory mode=0775 owner={{ user.name }} group={{ user.name }} recurse=yes"
  with_items:
    - "{{ downloads.torrents }}/deluge"
    - "{{ downloads.torrents }}/deluge/complete"
    - "{{ downloads.torrents }}/deluge/incomplete"
    - "{{ downloads.torrents }}/deluge/watched"
  when: (torrents_downloads_path is defined)|default(false)

- name: Openvpn configuration
  block:

  - name: Check if opvn config file exists
    stat:
      path: "/opt/deluge/openvpn/config.ovpn"
    register: config_ovpn

  - name: Import 'openvpn config'
    shell: "curl -Lo /opt/deluge/openvpn/config.ovpn '{{ vpn.config }}'"
    become: yes
    become_user: "{{ user.name }}"
    when: not config_ovpn.stat.exists

  when: (vpn.enable|default(false,true))

- name: Set default_volumes variable
  set_fact:
    default_volumes:
      - "/opt/deluge:/config"
      - "/opt/scripts:/scripts"
      - "/mnt:/mnt"

- name: Create and start container
  docker_container:
    name: deluge
    image: "binhex/arch-delugevpn:1.3.15_18_ge050905b2-1-04"
    pull: yes
    capabilities:
      - NET_ADMIN
    published_ports:
      - "127.0.0.1:8112:8112"
      - "58846:58846"
      - "58946:58946"
      - "{{ vpn.port }}:{{ vpn.port }}"
      # jackett port
      - "127.0.0.1:9117:9117"
    env:
      PUID: "{{ uid }}"
      PGID: "{{ gid }}"
      UMASK: "000"
      VPN_ENABLED: "{{ vpn.enable }}"
      VPN_PROV: "airvpn"
      ENABLE_PRIVOXY: "no"
      LAN_NETWORK: "172.18.0.0/16"
      NAME_SERVERS: "209.222.18.222,84.200.69.80,37.235.1.174,1.1.1.1,209.222.18.218,37.235.1.177,84.200.70.40,1.0.0.1"
      DELUGE_DAEMON_LOG_LEVEL: "info"
      DELUGE_WEB_LOG_LEVEL: "info"
      DEBUG: "false"
    volumes: "{{ default_volumes + torrents_downloads_path|default([]) }}"
    labels:
      traefik.enable: "true"
      traefik.backend: "deluge"
      traefik.frontend.redirect.entryPoint: "https"
      traefik.frontend.rule: "Host:deluge.{{ user.domain }}"
      traefik.port: "8112"
      traefik.frontend.auth.basic: "{{ htpasswd }}"
      traefik.docker.network: "cloudbox"
      "com.github.cloudbox.cloudbox_managed": "true"
#    labels:
#      traefik.enable: "true"
#      traefik.http.routers.deluge.entrypoints: "http"
#      traefik.http.routers.deluge.rule: "Host(`deluge.{{ user.domain }}`)"
#      traefik.http.middlewares.deluge-https-redirect.redirectscheme.scheme: "https"
#      traefik.http.routers.deluge.middlewares: "deluge-https-redirect"
#      traefik.http.routers.deluge-secure.entrypoints: "https"
#      traefik.http.routers.deluge-secure.rule: "Host(`deluge.{{ user.domain }}`)"
#      traefik.http.routers.deluge-secure.tls: "true"
#      traefik.http.routers.deluge-secure.tls.certresolver: "letsEncrypt"
#      traefik.http.routers.deluge-secure.middlewares: "secured@file"
#      traefik.http.routers.deluge-secure.service: "deluge"
#      traefik.http.services.deluge.loadbalancer.server.port: "8112"
#      traefik.docker.network: "cloudbox"
#      "com.github.cloudbox.cloudbox_managed": "true"
    networks:
      - name: cloudbox
        aliases:
          - deluge
    purge_networks: yes
    restart_policy: unless-stopped
    state: started

- name: Stop container to customize deluge settings
  docker_container:
    name: deluge
    state: stopped

- name: Check deluge label.conf exists
  stat:
    path: "/opt/deluge/label.conf"
    get_attributes: false
    get_checksum: false
    get_md5: false
    get_mime: false
  register: deluge_settings

- name: Import deluge settings
  copy:
    src: "{{ item }}"
    dest: "/opt/deluge/{{ item }}"
    owner: "{{ user.name }}"
    group: "{{ user.name }}"
    mode: 0775
    force: yes
  with_items:
    - "autoadd.conf"
    - "blocklist.conf"
    - "core.conf"
    - "execute.conf"
    - "label.conf"
    - "web.conf"
  when: deluge_settings.stat.exists == False

- name: Import deluge_manage.sh
  copy:
    src: "deluge_manage.sh"
    dest: "/opt/scripts/deluge/deluge_manage.sh"
    owner: "{{ user.name }}"
    group: "{{ user.name }}"
    mode: 0775
    force: yes

- name: Start container to apply changes
  docker_container:
    name: deluge
    state: started
